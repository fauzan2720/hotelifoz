// Mocks generated by Mockito 5.4.0 from annotations
// in hotelifoz/test/features/launch/model/services/user_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hotelifoz/features/launch/model/models/user_model.dart' as _i5;
import 'package:hotelifoz/features/launch/model/services/user_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<String, _i5.UserModel>> getUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i4.Stream<_i2.Either<String, _i5.UserModel>>.empty(),
      ) as _i4.Stream<_i2.Either<String, _i5.UserModel>>);
  @override
  _i4.Future<_i2.Either<String, bool>> createUserIfNotExists() =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserIfNotExists,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<String, bool>>.value(
            _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #createUserIfNotExists,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, bool>>);
}
